<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The path of Learning</title>
  
  
  <link href="https://leewangwang.github.io/atom.xml" rel="self"/>
  
  <link href="https://leewangwang.github.io/"/>
  <updated>2024-12-22T12:48:53.810Z</updated>
  <id>https://leewangwang.github.io/</id>
  
  <author>
    <name>Josh Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://leewangwang.github.io/2024/12/22/hello-world/"/>
    <id>https://leewangwang.github.io/2024/12/22/hello-world/</id>
    <published>2024-12-22T12:48:53.810Z</published>
    <updated>2024-12-22T12:48:53.810Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>入职日记</title>
    <link href="https://leewangwang.github.io/2024/12/22/%E5%85%A5%E8%81%8C%E6%97%A5%E8%AE%B0/"/>
    <id>https://leewangwang.github.io/2024/12/22/%E5%85%A5%E8%81%8C%E6%97%A5%E8%AE%B0/</id>
    <published>2024-12-22T10:19:42.000Z</published>
    <updated>2024-12-22T10:39:05.983Z</updated>
    
    <content type="html"><![CDATA[<p>day1</p><p>入职之日</p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录下当前这个魔幻的世界</summary>
    
    
    
    <category term="随记" scheme="https://leewangwang.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://leewangwang.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://leewangwang.github.io/2024/12/22/README/"/>
    <id>https://leewangwang.github.io/2024/12/22/README/</id>
    <published>2024-12-22T09:39:39.322Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBlogSource"><a href="#MyBlogSource" class="headerlink" title="MyBlogSource"></a>MyBlogSource</h1><p>用来存储&amp;更新我的博客源文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBlogSource&quot;&gt;&lt;a href=&quot;#MyBlogSource&quot; class=&quot;headerlink&quot; title=&quot;MyBlogSource&quot;&gt;&lt;/a&gt;MyBlogSource&lt;/h1&gt;&lt;p&gt;用来存储&amp;amp;更新我的博客源文件&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面试记录——面试问题</title>
    <link href="https://leewangwang.github.io/2023/04/03/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>https://leewangwang.github.io/2023/04/03/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</id>
    <published>2023-04-03T01:59:41.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度一面测开（王）"><a href="#百度一面测开（王）" class="headerlink" title="百度一面测开（王）"></a>百度一面测开（王）</h1><ol><li>研究背景 技术方向 担任角色</li><li>KPI数据如何处理？</li><li>创新点在哪？</li><li>项目背景和技术方案</li><li>Mysql数据库设计考虑哪些问题？</li><li>主键、外键、表、建立索引</li><li>数据库三范式要求</li><li>商品ID唯一主键</li><li>高并发处理</li><li>计算机网络五层模型</li><li>HTTP协议在哪一层？</li><li>Http和Https的区别</li><li>HTTP状态码</li><li>输入<a href="http://www.baidu.com的流程/">www.baidu.com的流程</a></li><li>什么是事务？事务的特性</li><li>主键与外键的区别</li><li>Mysql索引优缺点</li><li>进程、线程、协程</li><li>线程安全</li><li>黑盒、白盒（场景题测试—电梯）</li><li>Jmeter压测的目的和流程</li><li>代码：两数之和</li></ol><p>反问</p><ol><li>部门技术栈</li></ol><h1 id="腾讯测开一面（王）"><a href="#腾讯测开一面（王）" class="headerlink" title="腾讯测开一面（王）"></a>腾讯测开一面（王）</h1><ol><li>算法题：有效括号 很容易</li><li>多线程创建方法</li><li>线程锁的实现</li><li>synchronized用法</li><li>为什么用激活函数</li><li>dataframe遍历</li><li>batchsize设大设小的区别</li><li>实际中如何调参batchsize</li><li>batchsize过小的危害</li><li>解释一下归一化</li><li>用过哪些网络模型</li><li>介绍Transformer</li><li>项目中怎么使用JMeter测试登录接口</li><li>请求头header包括什么</li><li>游戏云顶之弈可能出现哪些bug，可能是什么原因造成的</li></ol><h1 id="美团测开一面（张）"><a href="#美团测开一面（张）" class="headerlink" title="美团测开一面（张）"></a>美团测开一面（张）</h1><ol><li>自我介绍</li><li>从哪学的知识？</li><li><code>==</code>和<code>equals</code>的区别</li><li>Java反射</li><li>Java应用和小程序的区别</li><li>Exception和Error的区别</li><li>Java异常的处理方法</li><li>自定义异常</li><li>Spring Boot 的区别以及优点</li><li>介绍一下缓存</li><li>Redis三种策略</li><li>缓存穿透、击穿</li><li>Linux命令</li><li>项目遇到的问题</li><li>“信仰不息”测试用例</li></ol><h1 id="美团测开一面（柳）"><a href="#美团测开一面（柳）" class="headerlink" title="美团测开一面（柳）"></a>美团测开一面（柳）</h1><ol><li>项目最大的困难</li><li>自测发现了多少bug</li><li>如何保证测试全面性</li><li>软件测试模型 v模型</li><li>算法遇到的困难</li><li>分工是什么</li><li>网络协议 </li><li>tcp udp区别 适用场景</li><li>常用shell命令</li><li>查日志命令</li><li>数据库类型</li><li>大数据生态</li><li>分布式文件数据库</li><li>数据库索引</li><li>四大特性</li><li>MySQL函数</li><li>jdk和jre</li><li>数组和链表区别</li><li>spring配置文件</li><li>maven pom文件</li><li>gc什么时候垃圾回收失败</li><li>为什么想做测开</li><li>测开工作内容</li><li>实习规划</li></ol><h1 id="美团测开二面（柳）"><a href="#美团测开二面（柳）" class="headerlink" title="美团测开二面（柳）"></a>美团测开二面（柳）</h1><ol><li>对面试岗位的了解</li><li>你的优势，为什么选择这个岗位</li><li>测试开发的职责</li><li>测试的题目（银行App）</li><li>描述一下测试用例（安全性）（性能）（兼容性）</li><li>苹果不同系列手机都要测试吗？</li><li>你觉得测开要学习哪些内容？</li><li>你学习了哪些测试的基础知识</li><li>“信仰不息”里面有哪些测试？</li><li>如何学习的测试开发？</li><li>你觉得哪一些知识学习比较难</li><li>最近学习的知识（印象最深刻的）</li><li>自动化测试实现的原理</li><li>路径规划项目（怎么判断规划路径是最好的）</li><li>你对自己的现状满足吗？</li><li>为什么选择美团？</li><li>你比较看重什么？</li><li>有其他的HC吗？</li><li>能实习多久？</li></ol><h1 id="美团开发一面（徐）"><a href="#美团开发一面（徐）" class="headerlink" title="美团开发一面（徐）"></a>美团开发一面（徐）</h1><ol><li>日志异常检测怎么做？</li><li>通过日志就能检测到异常？</li><li>整个日志的所有情况都能实现？</li><li>秒杀系统</li><li>本地缓存解决问题？</li><li>Redis怎么保证缓存增减是正确的？</li><li>秒杀库存增减失败</li><li>Redis&#x2F;Mysql数据怎么保证是对的？</li><li>Redis删除库存指令</li><li>Spring&#x2F;Spring Boot优势</li><li>Spring AOP再项目中有用到吗？</li><li>项目中如何限流</li><li>限流底层原理</li><li>线程池参数</li><li>核心线程数设多大？</li><li>同步锁&#x2F;可重复锁</li><li>类加载的底层原理</li><li>Mysql脏读</li><li>MVCC解决什么问题？</li><li>Redis击穿</li><li>Java堆栈信息怎么查看</li><li>创建对象有哪些方式？</li><li>算法题：二叉树后序遍历</li></ol><h1 id="美团开发二面（徐）"><a href="#美团开发二面（徐）" class="headerlink" title="美团开发二面（徐）"></a>美团开发二面（徐）</h1><ol><li>项目中数据库是如何设计的？</li><li>为什么要有一个秒杀单独商品表</li><li>输入<a href="http://www.baidu.com网页访问流程/">www.baidu.com网页访问流程</a></li><li>服务端响应流程</li><li>Linux执行ls命令的实现原理</li><li>算法题：倒水桶</li></ol><h1 id="字节开发一面（徐）"><a href="#字节开发一面（徐）" class="headerlink" title="字节开发一面（徐）"></a>字节开发一面（徐）</h1><ol><li>优先队列</li><li>堆的底层数据结构</li><li>操作系统底层使用哪些数据结构</li><li>集合数据结构</li><li>线程安全</li><li>自旋锁</li><li>垃圾回收机制</li><li>当程序出现gc，正常的程序是否能被执行</li><li>http协议有哪些常见的状态码</li><li>400引起的原因</li><li>500如何排查</li><li>mySQL了解哪些，事务、索引（展开说说）</li><li>聚簇索引和非聚簇索引的区别</li><li>什么是回表查询</li><li>Redis的数据结构和方法</li><li>你都用过什么数据结构</li><li>Redis之key和value可以存储的最大值</li><li>算法题</li></ol><h1 id="美团测开—-三面（柳）"><a href="#美团测开—-三面（柳）" class="headerlink" title="美团测开—&gt;三面（柳）"></a>美团测开—&gt;三面（柳）</h1><ol><li>微信小程序</li><li>小程序同时打卡，前端如何处理并发问题？</li><li>有没有出现性能问题？如何排查？</li><li>小程序前端有没有出现什么问题？怎么解决的？</li></ol><h1 id="美团一面测开—-一面（李）"><a href="#美团一面测开—-一面（李）" class="headerlink" title="美团一面测开—&gt;一面（李）"></a>美团一面测开—&gt;一面（李）</h1><ol><li>Redis和Mysql的区别</li><li>为什么要用MQ？</li><li>如果想要优化，怎么来进行优化呢？</li><li>如何保证线程安全？</li><li>你的科研内容是什么？</li><li>如何避免重复消费？</li><li>HTTP和Socket的区别？</li><li>HTTP长连接和短连接</li><li>数据库的命令</li><li>测试都有哪些类型？区别是什么？</li><li>微信发送消息如何设计测试用例？</li><li>git的常用命令</li><li>Linux的常用命令</li><li>1个算法题、1个数据库操作</li></ol><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录下各位的面试经过</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>基于深度学习的日志序列异常检测</title>
    <link href="https://leewangwang.github.io/2023/04/03/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%A5%E5%BF%97%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    <id>https://leewangwang.github.io/2023/04/03/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%A5%E5%BF%97%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</id>
    <published>2023-04-03T01:27:24.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    
    <summary type="html">记录下自己的研究方向所有的缺陷以及可能的创新点</summary>
    
    
    
    <category term="深度学习" scheme="https://leewangwang.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://leewangwang.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="日志异常检测" scheme="https://leewangwang.github.io/tags/%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>面经记录——算法题</title>
    <link href="https://leewangwang.github.io/2023/04/03/%E9%9D%A2%E7%BB%8F%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://leewangwang.github.io/2023/04/03/%E9%9D%A2%E7%BB%8F%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E7%AE%97%E6%B3%95%E9%A2%98/</id>
    <published>2023-04-03T01:27:24.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h2><p><strong>题目描述</strong></p><blockquote><p>有两个数组，一个代表小孩，一个代表饼干，第$i$个小孩的值是饥饿度，第$i$个饼干是饱和度，请问，饼干最多能让多少小孩吃饱。</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>小饼干先喂饱小胃口。下面的代码中利用遍历<code>cookie</code>来遍历胃口数组，并没有再使用一个for循环，而是采用自加的方式，这也是常用的技巧。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findContentChildren</span><span class="hljs-params">(<span class="hljs-type">int</span>[]cookies, <span class="hljs-type">int</span>[]children)</span> &#123;<br>        <span class="hljs-comment">// 首先进行排序</span><br>        Arrays.sort(cookies);<br>        Arrays.sort(children);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 从小到大进行遍历，最小大饼干分给最小的胃口</span><br>        <span class="hljs-keyword">while</span> (child &lt; children.length &amp;&amp; cookie &lt; cookies.length) &#123;<br>            <span class="hljs-keyword">if</span> (children[child] &lt;= cookies[cookie++])<br>                child++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> child;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h2><p><strong>题目描述</strong></p><blockquote><p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值。</p><p>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列。</p><p>实际操作上，其实连删除的操作都不用做，因为题目要求的是最长摆动序列的长度，所以只需要统计数组的峰值数量就可以了。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wiggleMaxLength</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length &lt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums.length;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            cur = nums[i] - nums[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (cur &gt; <span class="hljs-number">0</span> &amp;&amp; pre &lt;= <span class="hljs-number">0</span> || cur &lt; <span class="hljs-number">0</span> &amp;&amp; pre &gt;= <span class="hljs-number">0</span>) &#123;<br>                result++;<br>                pre = cur;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><p><strong>题目描述</strong></p><blockquote><p>给定一个整数数组nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>局部最优：当前连续和为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素的连续和只会越来越小。</p><p>全局最优：选取最大“连续和”。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Maximum_Suborder_Sum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            count += nums[i];<br>            <span class="hljs-comment">// 取区间累计的最大值（相当于不断确定最大子序终止为止）</span><br>            max = Math.max(max, count);<br>            <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 相当于重置最大子序起始位置，因为遇到负数一定是拉低总和</span><br>                count = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="买卖股票的最佳时机II"><a href="#买卖股票的最佳时机II" class="headerlink" title="买卖股票的最佳时机II"></a>买卖股票的最佳时机II</h2><p><strong>题目描述</strong></p><blockquote><p>给定一个数组，它的第i个元素是一支给定股票第i天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>其实只需要收集每天的正利润就可以了，收集正利润的区间，就是股票买卖的区间，而只需要关注最终利润，不需要记录区间。</p><p>局部最优：收集每天的正利润，全局最优：求得最大利润。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] prices)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 最大利润</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 是否持有，0没有，1买入</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; prices.length; i++) &#123;<br>            cur = prices[i] - prices[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (cur &gt; <span class="hljs-number">0</span>) &#123;<br>                max += cur;<br>                flag = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur &lt; <span class="hljs-number">0</span> &amp;&amp; flag == <span class="hljs-number">1</span>) &#123;<br>                flag = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 优化</span><br>            <span class="hljs-comment">// max += Math.max(prices[i] - prices[i - 1],0);</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;h2 id=&quot;分发饼干&quot;&gt;&lt;a href=&quot;#分发饼干&quot; class=&quot;headerlink&quot; title=&quot;分发饼干&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面试记录——笔试算法题</title>
    <link href="https://leewangwang.github.io/2023/03/25/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://leewangwang.github.io/2023/03/25/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</id>
    <published>2023-03-25T02:43:45.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023-03-23—腾讯音乐笔试"><a href="#2023-03-23—腾讯音乐笔试" class="headerlink" title="2023.03.23—腾讯音乐笔试"></a>2023.03.23—腾讯音乐笔试</h1><p>小红拿到了一个仅由大写字母和小写字母组成的字符串。她想知道，在不考虑大小写的情况下，有多少对相邻的字母相等？字符串长度不超过2x10^5。</p><p>示例输入</p><blockquote><p>aABbbc</p></blockquote><p>输出</p><blockquote><p>3</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test_1</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> str.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">char1</span> <span class="hljs-operator">=</span> Character.toLowerCase(str.charAt(i));<br>            <span class="hljs-type">char</span> <span class="hljs-variable">char2</span> <span class="hljs-operator">=</span> Character.toLowerCase(str.charAt(i+<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">if</span> (char1 == char2) &#123;<br>                count += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aABbbc&quot;</span>;<br>        System.out.println(test_1(str1));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="阿里笔试"><a href="#阿里笔试" class="headerlink" title="阿里笔试"></a>阿里笔试</h1><p>一个球队有n个球员，已知他们一共接受了x张黄牌，y张红牌。当一个球员满足以下条件之一时会立刻下场： 1.接受了2张黄牌 2.接受了1张红牌。 请问己知以上信息的前提下，当前能上场的球员最多少人？最少有多少人？共有q次查询。 </p><blockquote><p>第一行输入一个正整数q，代表查询的次数。<br>接下来的q行，每一行输入三个整数n,x,y，代表一次查询。<br>$1 \leq q \leq 10^4 , 1 \leq n \leq 10^9, 0 &lt; x , y &lt; 10^9$<br>保证至少存在一种合法情况（即不会所有人都被罚下场了继续接受到黄牌&#x2F;二牌）<br>输出q行，每一行输出两个整数max,min，代表当前能上场球员数量的最大值和最小值</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span>[][] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[q][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; q; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> calculateMax(n, x, y);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> calculateMin(n, x, y);<br>            result[i][<span class="hljs-number">0</span>] = max;<br>            result[i][<span class="hljs-number">1</span>] = min;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; q; i++) &#123;<br>            System.out.println(result[i][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + result[i][<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 剩余最大人数：罚下的1红牌，黄牌每人一个之后再罚下</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateMax</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-comment">// 红牌罚下</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">less</span> <span class="hljs-operator">=</span> n - y;<br>        <span class="hljs-comment">// 每人一张黄牌</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">yellow</span> <span class="hljs-operator">=</span> less - x;<br>        <span class="hljs-comment">// 黄牌小于人数</span><br>        <span class="hljs-keyword">if</span> (yellow &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> less;<br>        <span class="hljs-comment">// 黄牌大于人数</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span>*less - x);<br>    &#125;<br>    <span class="hljs-comment">// 剩余最小人数：罚下的2黄牌或1红牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateMin</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-comment">// 红牌罚下</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">less</span> <span class="hljs-operator">=</span> n - y;<br>        <span class="hljs-comment">// 黄牌罚下</span><br>        less = (<span class="hljs-type">int</span>) Math.ceil((<span class="hljs-number">2</span>*less-x)/<span class="hljs-number">2.0</span>);<br>        <span class="hljs-keyword">return</span> less;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义一个数组的权值为：所有元素乘积的因子数量。例如，$[2,6]$的权值为6，因为$2*6&#x3D;12$，12有6个因子：$ (1,2,3,4,6,12)$，现在给定一个数组，试求该数组有多少连续子数组的权值不小于k？</p><blockquote><p>输入：<br>第一行输入两个正整数n和k。<br>第二行输入n个正整数a_i;，代表给定的数组。<br>1≤n,a_i≤200000<br>1≤k≤10^9<br>输出：<br>权值不小于k的连续子数组数量。</p></blockquote><blockquote><p>输入：<br>4 4<br>2 3 1 3<br>输出：<br>3</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYinZi</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; Math.sqrt(num); i++) &#123;<br>            <span class="hljs-keyword">if</span> (num % i == <span class="hljs-number">0</span>) &#123;<br>                flag += <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeight</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> w)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; nums.length; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i; k &lt;= j; k++) &#123;<br>                    sum *= nums[k];<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> getYinZi(sum);<br>                <span class="hljs-keyword">if</span> (weight &gt;= w)<br>                    result++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            nums[i] = scanner.nextInt();<br>        &#125;<br>        System.out.println(getWeight(nums, k));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录面试遇到的所有算法题</summary>
    
    
    
    <category term="面经记录" scheme="https://leewangwang.github.io/categories/%E9%9D%A2%E7%BB%8F%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Java" scheme="https://leewangwang.github.io/tags/Java/"/>
    
    <category term="面经" scheme="https://leewangwang.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="算法题" scheme="https://leewangwang.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot-Pay项目中遇到的问题</title>
    <link href="https://leewangwang.github.io/2023/03/23/Spring-Boot-Pay%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://leewangwang.github.io/2023/03/23/Spring-Boot-Pay%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-03-23T01:49:09.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring-Boot问题"><a href="#1-Spring-Boot问题" class="headerlink" title="1. Spring Boot问题"></a>1. Spring Boot问题</h1><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202305291915584.png" alt="image-20230529185105071" width="67%;" /><h2 id="1-1-spring-boot-starter-thymeleaf-’-not-found"><a href="#1-1-spring-boot-starter-thymeleaf-’-not-found" class="headerlink" title="1.1 spring-boot-starter-thymeleaf:’ not found"></a>1.1 spring-boot-starter-thymeleaf:’ not found</h2><p>Spring Boot版本3.0.7，Java17</p><p>问题定位：项目中的缓存问题。idea默认缓存maven本地库中的依赖库，在新建项目时会直接到缓存中寻找依赖库。如果相同库只是修改版本会导致IDEA无法从缓存中依赖到相应的库。</p><p>解决办法：IDEA设置里面的<strong>Invalidate Caches</strong>，之后右键pom.xml文件重新Reload Maven库。</p><h2 id="1-2-Spring-MVC-–-WebMvcConfigurerAdapter-已弃用"><a href="#1-2-Spring-MVC-–-WebMvcConfigurerAdapter-已弃用" class="headerlink" title="1.2 Spring MVC – WebMvcConfigurerAdapter 已弃用"></a>1.2 Spring MVC – WebMvcConfigurerAdapter 已弃用</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootPayApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span>  &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(SpringBootPayApplication.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringBootPayApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WebMvcConfigurerAdapter 已弃用，改为WebMvcConfigurer</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootPayApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(SpringBootPayApplication.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringBootPayApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录下自己学习Spring-Boot-Pay项目中遇到的问题</summary>
    
    
    
    <category term="程序人生" scheme="https://leewangwang.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="Java" scheme="https://leewangwang.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://leewangwang.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门</title>
    <link href="https://leewangwang.github.io/2023/03/23/Redis%E5%85%A5%E9%97%A8/"/>
    <id>https://leewangwang.github.io/2023/03/23/Redis%E5%85%A5%E9%97%A8/</id>
    <published>2023-03-23T01:49:09.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><ul><li>Redis是一个基于内存的<code>key-value</code>结构数据库<ul><li><strong>性能极高</strong> – 基于内存存储，读写性能高</li><li><strong>原子</strong> - Redis 的所有操作都是原子性的。</li><li><strong>持久化</strong> - Redis 支持数据的持久化。</li><li><strong>备份</strong> - Redis 支持数据的备份，即 master-slave 模式的数据备份。</li><li>适合存储热点数据（热点商品、咨询、新闻）</li></ul></li><li>官网：<a href="https://redis.io/">https://redis.io/</a></li><li>Redis应用场景：缓存、消息队列、任务队列、分布式锁</li></ul><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><ul><li>Redis是用C语言开发的一个开源的、高性能的键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化NoSql数据库</li><li>NoSql(Not Only Sql)，不仅仅是SQL，泛指非关系型数据库，NoSql数据库并不是要取代关系型数据库，而是关系型数据库的补充</li></ul><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul><li>Windows 版：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li><li>Linux 版：<a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></li></ul><h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h3><p>1.将Redis安装包上传到Linux</p><p>2.解压安装包，改成你自己的redis版本，路径我习惯解压到<code>/usr/local</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf redisVersion.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><p>3.安装Redis的依赖环境gcc，我的云服务器已经装过了，本地的Linux还没装</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装依赖环境</span><br>yum install gcc-c++<br></code></pre></td></tr></table></figure><p>4.进入<code>/usr/local/redis根目录</code>，进行编译</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入到根目录</span><br><span class="hljs-built_in">cd</span> /usr/local/redis根目录<br><br><span class="hljs-comment"># 编译</span><br>make<br></code></pre></td></tr></table></figure><p>5.进入redis的src目录，进行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入到src目录</span><br><span class="hljs-built_in">cd</span> /usr/local/redis根目录/src<br><br><span class="hljs-comment"># 进行安装</span><br>make install<br></code></pre></td></tr></table></figure><h3 id="MacOS下安装"><a href="#MacOS下安装" class="headerlink" title="MacOS下安装"></a>MacOS下安装</h3><p>从终端运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew install redis<br></code></pre></td></tr></table></figure><p>这将在您的系统上安装 Redis。</p><h2 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h2><h3 id="在前台启动和停止-Redis"><a href="#在前台启动和停止-Redis" class="headerlink" title="在前台启动和停止 Redis"></a>在前台启动和停止 Redis</h3><p>要测试您的 Redis 安装，您可以<code>redis-server</code>从命令行运行可执行文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">redis-server<br></code></pre></td></tr></table></figure><p>如果成功，您将看到 Redis 的启动日志，Redis 将在前台运行。</p><p>要停止 Redis，请输入<code>Ctrl-C</code>。</p><h3 id="使用-launchd-启动和停止-Redis"><a href="#使用-launchd-启动和停止-Redis" class="headerlink" title="使用 launchd 启动和停止 Redis"></a>使用 launchd 启动和停止 Redis</h3><p>作为在前台运行 Redis 的替代方法，您还可以使用<code>launchd</code>在后台启动进程：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew services start redis<br></code></pre></td></tr></table></figure><p>这将启动 Redis 并在登录时重新启动它。<code>launchd</code>您可以通过运行以下命令来检查托管 Redis 的状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew services info redis<br></code></pre></td></tr></table></figure><p>如果该服务正在运行，您将看到如下输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">redis (homebrew.mxcl.redis)<br>Running: ✔<br>Loaded: ✔<br>User: miranda<br>PID: 67975<br></code></pre></td></tr></table></figure><p>要停止服务，请运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew services stop redis<br></code></pre></td></tr></table></figure><h3 id="连接到-Redis"><a href="#连接到-Redis" class="headerlink" title="连接到 Redis"></a>连接到 Redis</h3><p>Redis 运行后，您可以通过运行以下命令对其进行测试<code>redis-cli</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">redis-cli<br></code></pre></td></tr></table></figure><p>这将打开 Redis REPL。尝试运行一些命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush demos redis-macOS-demo<br>OK<br>127.0.0.1:6379&gt; rpop demos<br><span class="hljs-string">&quot;redis-macOS-demo&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5中常用的数据类型</p><ul><li>字符串：String</li><li>哈希：Hash</li><li>列表：List</li><li>集合：Set</li><li>有序集合：Sorted Set</li></ul><h2 id="字符串-String-常用命令"><a href="#字符串-String-常用命令" class="headerlink" title="字符串(String)常用命令"></a>字符串(String)常用命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SET key value</td><td align="center">设置指定key的值</td></tr><tr><td align="center">GET key</td><td align="center">获取指定key的值</td></tr><tr><td align="center">SETEX key seconds value</td><td align="center">设置指定key的值，并将key的过期时间设为seconds秒</td></tr><tr><td align="center">SETNX key value</td><td align="center">只有在key不存在时设置key的值</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 1<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 2<br>OK<br>127.0.0.1:6379&gt; get k1<br><span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; setex k3 5 3<br>OK<br>127.0.0.1:6379&gt; get k3<br><span class="hljs-string">&quot;3&quot;</span><br>127.0.0.1:6379&gt; get k3<br>(nil)<br>127.0.0.1:6379&gt; setnx k4 4<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get k4<br><span class="hljs-string">&quot;4&quot;</span><br>127.0.0.1:6379&gt; setnx k4 3<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><h2 id="哈希-Hash-常用命令"><a href="#哈希-Hash-常用命令" class="headerlink" title="哈希(Hash)常用命令"></a>哈希(Hash)常用命令</h2><p><code>Redis Hash</code>是一个<code>String</code>类型的<code>Field</code>和<code>Value</code>的映射表，<code>Hash</code>特别适合用于存储对象</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">HSET key field value</td><td align="center">将哈希表key 中的字段field的值设为value</td></tr><tr><td align="center">HGET key field</td><td align="center">获取存储在哈希表中指定字段的值</td></tr><tr><td align="center">HDEL key field</td><td align="center">删除存储在哈希表中的指定字段</td></tr><tr><td align="center">HKEYS key</td><td align="center">获取哈希表中所有字段</td></tr><tr><td align="center">HVALS key</td><td align="center">获取哈希表中所有值</td></tr><tr><td align="center">HGETALL key</td><td align="center">获取在哈希表中指定key的所有字段和值</td></tr></tbody></table><h2 id="列表-List-常用命令"><a href="#列表-List-常用命令" class="headerlink" title="列表(List)常用命令"></a>列表(List)常用命令</h2><p><code>Redis List</code>是简单的字符串列表，按照插入顺序排序</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>LPUSH</code> key value1 [value2]</td><td align="center">将一个或多个值插入到列表头部</td></tr><tr><td align="center"><code>LRANGE</code> key start stop</td><td align="center">获取列表指定范围内的元素</td></tr><tr><td align="center"><code>RPOP</code> key</td><td align="center">移除并获取列表最后一个元素</td></tr><tr><td align="center"><code>LLEN</code> key</td><td align="center">获取列表长度</td></tr><tr><td align="center"><code>BRPOP</code> key1 [key2] timeout</td><td align="center">移出并获取列表的最后一个元素 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td></tr></tbody></table><h2 id="集合-Set-常用命令"><a href="#集合-Set-常用命令" class="headerlink" title="集合(Set)常用命令"></a>集合(Set)常用命令</h2><p><code>Redis set</code>是<code>String</code>类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SADD key member1 [member2]</td><td align="center">向集合添加一个或多个成员</td></tr><tr><td align="center">SMEMBERS key</td><td align="center">返回集合中的所有成员</td></tr><tr><td align="center">SCARD key</td><td align="center">获取集合的成员数</td></tr><tr><td align="center">SINTER key1 [key2]</td><td align="center">返回给定所有集合的交集</td></tr><tr><td align="center">SUNION key1 [key2]</td><td align="center">返回所有给定集合的并集</td></tr><tr><td align="center">SDIFF key1 [key2]</td><td align="center">返回给定所有集合的差集</td></tr><tr><td align="center">SREM key member1 [member2]</td><td align="center">移除集合中一个或多个成员</td></tr></tbody></table><h2 id="有序集合-Sorted-Set-常用命令"><a href="#有序集合-Sorted-Set-常用命令" class="headerlink" title="有序集合(Sorted Set)常用命令"></a>有序集合(Sorted Set)常用命令</h2><p><code>Redis Sorted Set</code>有序集合是<code>String</code>类型元素的集合，且不允许重复的成员。每个元素都会关联一个<code>double</code>类型的分数(<code>score</code>) 。<code>Redis</code>正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ZADD key score1 member1 [score2 member2]</td><td align="center">向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td align="center">ZRANGE key start stop [WITHSCORES]</td><td align="center">通过索引区间返回有序集合中指定区间内的成员</td></tr><tr><td align="center">ZINCRBY key increment member</td><td align="center">有序集合中对指定成员的分数加上增量increment</td></tr><tr><td align="center">ZREM key member [member …]</td><td align="center">移除有序集合中的一个或多个成员</td></tr></tbody></table><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">KEYs pattern</td><td align="center">查找所有符合给定模式(pattern)的key</td></tr><tr><td align="center">EXISTs key</td><td align="center">检查给定key是否存在</td></tr><tr><td align="center">TYPE key</td><td align="center">返回key所储存的值的类型</td></tr><tr><td align="center">TTL key</td><td align="center">返回给定key的剩余生存时间(TTL, time to live)，以秒为单位</td></tr><tr><td align="center">DEL key</td><td align="center">该命令用于在key存在是删除key</td></tr></tbody></table><h1 id="在Java中使用Redis"><a href="#在Java中使用Redis" class="headerlink" title="在Java中使用Redis"></a>在Java中使用Redis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Redis的Java客户端有很多，官方推荐的有三种<ul><li><code>Jedis</code></li><li><code>Lettuce</code></li><li><code>Redisson</code></li></ul></li><li>Spring对Redis客户端进行了整合，提供了SpringDataRedis，在Spring Boot项目中还提供了对应的Starter，即<code>spring-boot-starter-data-redis</code></li></ul><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><ul><li><p>使用Jedis的步骤</p><ol><li>获取连接</li><li>执行操作</li><li>关闭连接</li></ol></li><li><p>在此之前我们需要导入一下Jedis的maven坐标</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">XML<br>&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;2.8.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写测试类</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">JAVA<br>@SpringBootTest<br>class RedisTestApplicationTests &#123;<br><br>    @Test<br>    void contextLoads() &#123;<br>        //1. 获取连接<br>        Jedis jedis = new Jedis(&quot;localhost&quot;, 6379);<br>        //2. 执行具体操作<br>        jedis.set(&quot;name&quot;, &quot;Hades&quot;);<br><br>        jedis.hset(&quot;stu&quot;, &quot;name&quot;, &quot;Tom&quot;);<br>        jedis.hset(&quot;stu&quot;, &quot;age&quot;, &quot;18&quot;);<br>        jedis.hset(&quot;stu&quot;, &quot;phone&quot;, &quot;13355558888&quot;);<br><br>        Map&lt;String, String&gt; map = jedis.hgetAll(&quot;stu&quot;);<br>        Set&lt;String&gt; keySet = map.keySet();<br>        for (String key : keySet) &#123;<br>            String value = map.get(key);<br>            System.out.println(key + &quot;:&quot; + value);<br>        &#125;<br>        String name = jedis.get(&quot;name&quot;);<br>        System.out.println(name);<br>        //3. 关闭连接<br>        jedis.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出结果</p><blockquote><p>num:13355558888<br>name:Tom<br>age:18<br>Hades</p></blockquote></li><li><p>Jedis我们了解一下即可，大多数情况下我们还是用SpringDataRedis的</p></li></ul><h2 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h2><ul><li>SpringBoot项目中，可以使用<code>SpringDataRedis</code>来简化Redis（常用）</li><li>Spring Data Redis中提供了一个高度封装的类：<code>RedisTemplate</code>，针对jedis客户端中大量api进行了归类封装，将同一类型操作封装为<code>operation</code>接口，具体分类如下：<ul><li>ValueOperations：简单K-V操作</li><li>SetOperations：set类型数据操作</li><li>ZSetOperations：zset类型数据操作</li><li>HashOperations：针对map类型的数据操作</li><li>ListOperations：针对list类型的数据操作</li></ul></li></ul><p>1.使用SpringDataRedis，我们首先需要导入它的maven坐标</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring Boot-redis的依赖包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.之后重新设置一下序列化器，防止出现乱码，在<code>config</code>包下创建<code>RedisConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br><br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        redisTemplate.setConnectionFactory(connectionFactory);<br><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.随后在<code>application.yml</code>中配置一下连接redis的相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment">#password: root</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#操作的是0号数据库</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-comment">#Redis连接池配置</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大连接数</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">1ms</span> <span class="hljs-comment">#连接池最大阻塞等待时间</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">4</span> <span class="hljs-comment">#连接池中的最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#连接池中的最小空闲连接</span><br></code></pre></td></tr></table></figure><p>4.<code>String</code>类型数据操作</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">stringTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取对象</span><br>    <span class="hljs-type">ValueOperations</span> <span class="hljs-variable">valueOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue();<br>    <span class="hljs-comment">//设置name为Hades</span><br>    valueOperations.set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Hades&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) valueOperations.get(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(name);<br>    <span class="hljs-comment">//设置age为9527，有效时间10秒</span><br>    valueOperations.set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;9527&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> (String) valueOperations.get(<span class="hljs-string">&quot;age&quot;</span>);<br>    System.out.println(age);<br>    <span class="hljs-comment">//如果不存在，则设置name为Kyle</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">aBoolean</span> <span class="hljs-operator">=</span> valueOperations.setIfAbsent(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Kyle&quot;</span>);<br>    System.out.println(aBoolean);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下，由于name已经存在，故Kyle设置失败，最后返回false，10秒过后，我们再去redis中get name，则输出<code>nil</code>，表示不存在</p><blockquote><p>Hades<br>9527<br>false</p></blockquote><p>5.<code>Hash</code>类型数据操作</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">JAVA<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">hashTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>    hashOperations.put(<span class="hljs-string">&quot;4204000400&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Hades&quot;</span>);<br>    hashOperations.put(<span class="hljs-string">&quot;4204000400&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>);<br>    hashOperations.put(<span class="hljs-string">&quot;4204000400&quot;</span>, <span class="hljs-string">&quot;hobby&quot;</span>, <span class="hljs-string">&quot;Apex&quot;</span>);<br>    <span class="hljs-comment">//获取map集合</span><br>    Map&lt;String, String&gt; map = hashOperations.entries(<span class="hljs-string">&quot;4204000400&quot;</span>);<br>    Set&lt;String&gt; keySet = map.keySet();<br>    <span class="hljs-keyword">for</span> (String hashKey : keySet) &#123;<br>        System.out.println(hashKey + <span class="hljs-string">&quot;:&quot;</span> + map.get(hashKey));<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;*********************&quot;</span>);<br>    <span class="hljs-comment">//只获取keys</span><br>    Set&lt;String&gt; keys = hashOperations.keys(<span class="hljs-string">&quot;4204000400&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>        System.out.println(key);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;*********************&quot;</span>);<br>    <span class="hljs-comment">//只获取values</span><br>    List&lt;String&gt; values = hashOperations.values(<span class="hljs-string">&quot;4204000400&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String value : values) &#123;<br>        System.out.println(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下</p><blockquote><p>name:Hades<br>age:18<br>hobby:Apex</p><p>Hades<br>18<br>Apex</p></blockquote><p>6.<code>List</code>类型数据操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">JAVA<br>@Test<br>void listTest() &#123;<br>    ListOperations listOperations = redisTemplate.opsForList();<br>    //存数据<br>    listOperations.leftPush(&quot;testData&quot;, &quot;A&quot;);<br>    listOperations.leftPushAll(&quot;testData&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;);<br>    List&lt;String&gt; testDatas = listOperations.range(&quot;testData&quot;, 0, -1);<br>    //遍历<br>    for (String tableData : testDatas) &#123;<br>        System.out.print(tableData + &quot; &quot;);<br>    &#125;<br>    System.out.println();<br>    //获取当前list长度，用于遍历<br>    Long size = listOperations.size(&quot;testData&quot;);<br>    int value = size.intValue();<br>    //遍历输出并删除<br>    for (int i = 0; i &lt; value; i++) &#123;<br>        System.out.print(listOperations.leftPop(&quot;testData&quot;) + &quot; &quot;);<br>    &#125;<br>    //最后输出一下当前list长度<br>    System.out.println();<br>    System.out.println(listOperations.size(&quot;testData&quot;));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下</p><blockquote><p>D C B A<br>D C B A<br>0</p></blockquote><p>7.<code>Set</code>类型数据操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">JAVA<br>@Test<br>void setTest() &#123;<br>    SetOperations setOperations = redisTemplate.opsForSet();<br>    //存数据，这里存了两个a<br>    setOperations.add(&quot;tmp&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;a&quot;);<br>    遍历输出<br>    Set&lt;String&gt; tmpData = setOperations.members(&quot;tmp&quot;);<br>    for (String value : tmpData) &#123;<br>        System.out.print(value + &quot; &quot;);<br>    &#125;<br>    System.out.println();<br>    System.out.println(&quot;$$$$$$$$$$$$$$$$$$$&quot;);<br>    //删除bc<br>    setOperations.remove(&quot;tmp&quot;, &quot;b&quot;, &quot;c&quot;);<br>    //再次遍历输出<br>    tmpData = setOperations.members(&quot;tmp&quot;);<br>    for (String value : tmpData) &#123;<br>        System.out.print(value + &quot; &quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下，符合预期</p><blockquote><p>d b c a</p><p>d a</p></blockquote><p>8.<code>ZSet</code>类型数据操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">JAVA<br>@Test<br>void zsetTest() &#123;<br>    ZSetOperations zSetOperations = redisTemplate.opsForZSet();<br>    //存值<br>    zSetOperations.add(&quot;myZset&quot;, &quot;a&quot;, 0.0);<br>    zSetOperations.add(&quot;myZset&quot;, &quot;b&quot;, 1.0);<br>    zSetOperations.add(&quot;myZset&quot;, &quot;c&quot;, 2.0);<br>    zSetOperations.add(&quot;myZset&quot;, &quot;a&quot;, 3.0);<br>    //取值<br>    Set&lt;String&gt; myZset = zSetOperations.range(&quot;myZset&quot;, 0, -1);<br>    for (String s : myZset) &#123;<br>        System.out.println(s);<br>    &#125;<br>    //修改分数<br>    zSetOperations.incrementScore(&quot;myZset&quot;, &quot;b&quot;, 4.0);<br>    //取值<br>    System.out.println(&quot;$$$$$$$$$$$$$$$$$$$$$$$$$&quot;);<br>    myZset = zSetOperations.range(&quot;myZset&quot;, 0, -1);<br>    for (String s : myZset) &#123;<br>        System.out.println(s);<br>    &#125;<br>    //删除成员<br>    zSetOperations.remove(&quot;myZset&quot;, &quot;a&quot;, &quot;b&quot;);<br>    //取值<br>    System.out.println(&quot;$$$$$$$$$$$$$$$$$$$$$$$$$&quot;);<br>    myZset = zSetOperations.range(&quot;myZset&quot;, 0, -1);<br>    for (String s : myZset) &#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下</p><blockquote><p>b<br>c<br>a</p><p>c</p></blockquote><p>9.通用的数据类型操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">JAVA<br>@Test<br>void commonTest() &#123;<br>    //查看所有key<br>    Set&lt;String&gt; keys = redisTemplate.keys(&quot;*&quot;);<br>    for (String key : keys) &#123;<br>        System.out.println(key);<br>    &#125;<br>    //查看是否存在指定key<br>    System.out.println(&quot;$$$$$$$$$$$$$$$$$$$$$$$$$&quot;);<br>    System.out.println(redisTemplate.hasKey(&quot;Random&quot;));<br>    System.out.println(&quot;$$$$$$$$$$$$$$$$$$$$$$$$$&quot;);<br>    //删除指定key，并再次查看<br>    redisTemplate.delete(&quot;myZset&quot;);<br>    keys = redisTemplate.keys(&quot;*&quot;);<br>    for (String key : keys) &#123;<br>        System.out.println(key);<br>    &#125;<br>    System.out.println(&quot;$$$$$$$$$$$$$$$$$$$$$$$$$&quot;);<br>    //输出指定key的类型<br>    System.out.println(redisTemplate.type(&quot;tmp&quot;));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下</p><blockquote><p>tmp<br>name<br>4204000400<br>stu<br>myData</p><p>tmp<br>name<br>4204000400<br>stu<br>myData</p><p>SET</p></blockquote><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录下自己学习Redis的过程，内容来自黑马程序员的《瑞吉外卖》</summary>
    
    
    
    <category term="程序人生" scheme="https://leewangwang.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="Redis" scheme="https://leewangwang.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作Mysql</title>
    <link href="https://leewangwang.github.io/2023/03/22/Linux%E6%93%8D%E4%BD%9CMysql/"/>
    <id>https://leewangwang.github.io/2023/03/22/Linux%E6%93%8D%E4%BD%9CMysql/</id>
    <published>2023-03-22T10:29:43.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卸载Mysql"><a href="#卸载Mysql" class="headerlink" title="卸载Mysql"></a>卸载Mysql</h1><p>1.快速删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum remove  mysql mysql-server mysql-libs mysql-server<br></code></pre></td></tr></table></figure><p>2.查找残留程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rpm -qa | grep mysql<br><br>rpm -qa | grep mariadb<br></code></pre></td></tr></table></figure><p>3.删除残留程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64<br></code></pre></td></tr></table></figure><p>4.查找残留目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">whereis mysql<br></code></pre></td></tr></table></figure><p>5.逐条删除目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">rm –rf /usr/local/mysql<br></code></pre></td></tr></table></figure><h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><p>1.先创建要解压到的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/local/mysql<br></code></pre></td></tr></table></figure><p>2.随后解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql<br></code></pre></td></tr></table></figure><p>3.按顺序安装rpm包</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h1 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h1><p>1.查看MySQL服务状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl status mysqld<br></code></pre></td></tr></table></figure><p>2.停止Mysql服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl stop mysqld.service<br></code></pre></td></tr></table></figure><p>3.启动MySQL服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl start mysqld<br></code></pre></td></tr></table></figure><p>查看已经启动的服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">netstat -tunlp<br><br>netstat -tunlp | grep mysql<br></code></pre></td></tr></table></figure><p>4.查看MySQL进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ps -<span class="hljs-built_in">df</span> | grep mysql<br></code></pre></td></tr></table></figure><p>5.设置开机时自动启动MySQL服务，避免每次开机都要启动MySQL</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> mysqld<br></code></pre></td></tr></table></figure><h1 id="登录MySqL"><a href="#登录MySqL" class="headerlink" title="登录MySqL"></a>登录MySqL</h1><p>1.查看日志内容中包含password的行信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/mysqld.log |grep <span class="hljs-string">&#x27;A temporary password is generated&#x27;</span><br></code></pre></td></tr></table></figure><p>2.根据查询到的密码来登录MySQL</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -uroot -p<br></code></pre></td></tr></table></figure><p>3.登录成功之后修改密码</p><ul><li><p>设置密码长度最低位数</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> global validate_password_length=4;<br></code></pre></td></tr></table></figure></li><li><p>设置密码安全等级低，便于密码可修改为root</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> global validate_password_policy=LOW;<br></code></pre></td></tr></table></figure></li><li><p>设置密码为root</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">set password = password(&#x27;root&#x27;);<br></code></pre></td></tr></table></figure></li><li><p>开启访问权限</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">grant all on *.* to <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>刷新权限</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">flush privileges;<br></code></pre></td></tr></table></figure></li></ul><p>4.重启Mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">service mysqld restart  <br></code></pre></td></tr></table></figure><h1 id="设置Mysql允许远程连接"><a href="#设置Mysql允许远程连接" class="headerlink" title="设置Mysql允许远程连接"></a>设置Mysql允许远程连接</h1><p>1.设置防火墙，允许3306端口通过</p><p>2.登录mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>3.查看mysql库中的user表的host字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">use mysql;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p>4.修改root用户的host字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host<span class="hljs-operator">=</span>&quot;%&quot; <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span>&quot;root&quot;;<br></code></pre></td></tr></table></figure><p>5.使本次修改立即生效</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">flush privileges;<br></code></pre></td></tr></table></figure><h1 id="查看当前数据库内容"><a href="#查看当前数据库内容" class="headerlink" title="查看当前数据库内容"></a>查看当前数据库内容</h1><p>1.登录mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>2.显示所有的数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p>3.选择数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">use xxx;<br></code></pre></td></tr></table></figure><p>4.显示表</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><p>5.直接查询语句，显示表数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl;<br></code></pre></td></tr></table></figure><p>6.导入sql脚本</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 选择<br>mysql<span class="hljs-operator">&gt;</span>use abc;<br># 编码<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">set</span> names utf8;<br># 导入<br>mysql<span class="hljs-operator">&gt;</span>source <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>abcs.sql;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">总结自己碰到的所有问题，解决办法来自网上。</summary>
    
    
    
    
    <category term="Linux" scheme="https://leewangwang.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://leewangwang.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://leewangwang.github.io/2023/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://leewangwang.github.io/2023/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-22T02:04:57.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="Linux命令常用技巧"><a href="#Linux命令常用技巧" class="headerlink" title="Linux命令常用技巧"></a>Linux命令常用技巧</h2><ul><li><code>Tab</code>键自动补全</li><li>连续按两次<code>Tab</code>键，给出操作提示</li><li>使用上下箭头快速调出曾经使用过的命令</li><li>使用<code>Clear</code>命令或者快捷键<code>Ctrl</code>+<code>L</code>实现清屏</li></ul><h2 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> [-options] [parameter]<br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li><code>command</code>：命令名</li><li><code>[-options]</code>：选项，可用来对命令进行控制，也可以省略</li><li><code>[parameter]</code>：传给命令的参数，可以是0个，1个或多个</li></ul><p>注意：</p><ul><li><code>[]</code>代表可选命令名</li><li>选项，参数之间需要用空格进行分隔</li></ul></blockquote><h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>作用：列出当前目录下的文件和文件夹。</p><p>用法：<code>ls [-al] [dir]</code></p><p>说明：</p><ul><li><code>-a</code>：显示所有文件及目录（以<code>.</code>开头的隐藏文件也会列出）</li><li><code>-l</code>：除文件名外，还会讲文件的形态、权限、拥有者、文件大小等详细信息列出</li></ul></blockquote><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><blockquote><p>作用：切换目录。</p><p>用法：<code>cd [dirName]</code></p><p>说明：</p><ul><li><code>~</code>表示用户的home目录</li><li><code>.</code>表示当前所在的目录</li><li><code>..</code>表示当前位置的上级目录</li></ul></blockquote><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote><p>作用：创建一个新目录。</p><p>用法：<code>mkdir[-p] dirName</code></p><p>说明：</p><ul><li><code>-p</code>：确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录下，建立一个名为linuxCast的子目录</span><br><span class="hljs-built_in">mkdir</span> linuxCast<br><br><span class="hljs-comment"># 在工作目录下的linuxCast目录中建立一个名为test的子目录，若linuxCast目录不存在，则建立一个</span><br>mkdir-p linuxCast/test<br></code></pre></td></tr></table></figure><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><blockquote><p>作用：删除空目录。</p><p>用法：<code>rmdir [-p] dirName</code></p><p>说明：</p><ul><li><code>-p</code>：当子目录被删除后使父目录为空目录的话，则一并删除</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除名为linuxCast的空目录</span><br><span class="hljs-built_in">rmdir</span> linuxCast<br><br><span class="hljs-comment"># 删除linuxCast目录中名为test的子目录，若test目录删除后linuxCast目录变为空目录，则也被删除</span><br><span class="hljs-built_in">rmdir</span> -p linuxCast/test<br><br><span class="hljs-comment"># 删除名称以linuxCast开始的空目录</span><br><span class="hljs-built_in">rmdir</span> linuxCast*<br></code></pre></td></tr></table></figure><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>作用：删除文件或目录。</p><p>用法：<code>rm [-rf] name</code></p><p>说明：</p><ul><li><code>-r</code>：将目录及目录中所有文件（目录）逐一删除，即递归删除</li><li><code>-f</code>：无需确认，直接删除</li><li><code>name</code>：要删除的文件&#x2F;目录，支持通配符</li></ul></blockquote><h2 id="拷贝移动命令"><a href="#拷贝移动命令" class="headerlink" title="拷贝移动命令"></a>拷贝移动命令</h2><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>作用：复制文件或目录。</p><p>用法：<code>cp [-r] source dest</code></p><p>说明：</p><ul><li><code>-r</code>：如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</li><li><code>source</code>：要复制的资源（文件&#x2F;目录）</li><li><code>dest</code>：要移动到的位置</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将hello.txt复制到linuxCast目录中</span><br><span class="hljs-built_in">cp</span> hello.txt linuxCast/<br><br><span class="hljs-comment"># 将hello.txt复制到当前目录，并改名为hi.txt</span><br><span class="hljs-built_in">cp</span> hello.txt ./ hi.txt<br><br><span class="hljs-comment"># 将linuxCast目录和目录下所有文件复制到blog目录下</span><br><span class="hljs-built_in">cp</span> -r linuxCast/ ./blog/<br><br><span class="hljs-comment"># 将linuxCast目录下所有文件复制blog目录下</span><br><span class="hljs-built_in">cp</span> -r linuxCast/* ./blog/<br></code></pre></td></tr></table></figure><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote><p>作用：为文件或目录改名、或将文件或目录移动到其它位置。</p><p>用法：<code>mv source dest</code></p><p>说明：</p><ul><li><code>source</code>：要移动的资源（文件&#x2F;目录）</li><li><code>dest</code>：要移动到的位置</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将hello.txt改名为hi.txt</span><br><span class="hljs-built_in">mv</span> hello.txt hi.txt<br><br><span class="hljs-comment"># 将文件hi.txt移动到blog目录中</span><br><span class="hljs-built_in">mv</span> hi.txt blogl<br><br><span class="hljs-comment"># 将hi.txt移动到blog目录中，并改名为hello.txt</span><br><span class="hljs-built_in">mv</span> hi.txt blog/hello.txt<br><br><span class="hljs-comment"># 如果blog目录不存在，将linuxCast目录改名为blog</span><br><span class="hljs-built_in">mv</span> linuxCast/ blogl<br><br><span class="hljs-comment"># 如果blog目录存在，将linuxCast目录移动到blog目录中</span><br><span class="hljs-built_in">mv</span> linuxCast/ blogl<br></code></pre></td></tr></table></figure><h2 id="文本查看编辑命令"><a href="#文本查看编辑命令" class="headerlink" title="文本查看编辑命令"></a>文本查看编辑命令</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote><p>作用：查看文件内容。</p><p>用法：<code>cat [-n] fileName</code></p><p>说明：</p><ul><li><code>-n</code>：由1开始对所有输出的行数编号</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看/etc目录下的profile文件内容</span><br><span class="hljs-built_in">cat</span> /etc/profile<br><br><span class="hljs-comment"># 查看/etc目录下的profile文件内容，显示行号</span><br><span class="hljs-built_in">cat</span> -n /etc/profile<br></code></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><blockquote><p>作用：在文件中查找指定的字符串。</p><p>用法：<code>grep word fileName</code></p><p>说明：</p><ul><li><code>word：</code>查找的文本</li><li><code>fileName：</code>从哪个文件中种找</li></ul></blockquote><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>作用：在文件系统中查找文件。</p><p>用法：<code>find dirName -option fileName</code></p><p>说明：</p><ul><li><code>dirName</code>：指定目录</li><li><code>-option</code>：一般指定<code>-name</code>（根据文件名称来查找）</li><li><code>fileName</code>：可以使用通配符的方式</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在所有文件夹下查找helloworld.log文件</span><br>find / -name helloworld.log<br><br><span class="hljs-comment"># 在当前目录及其子目录下查找.java结尾文件</span><br>find . -name <span class="hljs-string">&quot;*.java&quot;</span><br><br><span class="hljs-comment"># 在/linuxCast目录及其子目录下查找.java结尾的文件</span><br>find /linuxCast -name <span class="hljs-string">&quot;*.java&quot;</span><br></code></pre></td></tr></table></figure><h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><blockquote><p>作用：对文件内容进行编辑。</p><p>用法：<code>vi fileName</code></p><p>说明：</p><ul><li><code>vim</code>是从<code>vi</code>发展来的一个功能更加强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中<code>vim</code>更加常用。</li><li>要使用<code>vim</code>命令，需要我们自己完成安装。可以使用下面的命令来完成安装：<code>yum install vim</code></li></ul></blockquote><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><blockquote><p>作用：对文件内容进行编辑。</p><p>用法：<code>vim fileName</code></p><p>说明：</p><ul><li>在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</li><li>vim在进行文本编辑时共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>插入模式</code>（Insert mode）和<code>底行模式</code>（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</li></ul><p>针对vim中的三种模式说明如下：</p><ol><li>命令模式<br>命令模式下可以查看文件内容、移动光标（上下左右箭头、<code>gg</code>(开头)、<code>G</code>（末尾））<br>通过vim命令打开文件后，默认进入命令模式<br>另外两种模式需要首先进入命令模式，才能进入彼此</li><li>插入模式<br>插入模式下可以对文件内容进行编辑<br>在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现<code>INSERT</code>字样<br>在插入模式下按下ESC键，回到命令模式</li><li>底行模式<br>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br>在命令模式下按下[:,&#x2F;]任意一个，可以进入底行模式<br>通过 <code>/</code> 方式进入底行模式后，可以对文件内容进行查找<br>通过 <code>:</code> 方式进入底行模式后，可以输入<code>wq</code>（保存并退出）、<code>q！</code>（不保存退出）、<code>set nu</code>（显示行号）</li></ol></blockquote><h2 id="文件压缩、解压命令"><a href="#文件压缩、解压命令" class="headerlink" title="文件压缩、解压命令"></a>文件压缩、解压命令</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><blockquote><p>作用：对文件进行打包、解包、压缩、解压。</p><p>用法：<code>tar [-zcxvf] fileName [files]</code></p><p>说明：</p><ul><li>包文件后缀为<code>.tar</code>表示只是完成了打包，并没有压缩</li><li>包文件后缀为<code>.tar.gz</code>表示打包的同时还进行了压缩，也可以用<code>.tgz</code>作为简写</li></ul><ul><li><code>-z</code>： 代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</li><li><code>-c</code>： 代表的是create，即创建新的包文件</li><li><code>-x</code>： 代表的是extract，实现从包文件中还原文件</li><li><code>-v</code>： 代表的是verbose，显示命令的执行过程</li><li><code>-f</code>： 代表的是file，用于指定包文件的名称</li><li><code>c</code>和<code>x</code>是互斥的，解压和压缩不能同时进行</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前目录下所有文件打包，打包后的文件名为hello.tar</span><br>tar -cvf hello.tar ./*<br><br><span class="hljs-comment"># 将当前目录下所有文件打包并压缩，打包后的文件名为hello.tar.gz</span><br>tar -czvf hello.tar.gz ./*<br><br><span class="hljs-comment"># 将hello.tar.gz中的文件解压缩</span><br>tar -zxvf hello.tar.gz<br></code></pre></td></tr></table></figure><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><blockquote><p>作用：对文件进行解压。</p><p>用法：<code>zunzip fileName</code></p></blockquote><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><blockquote><p>作用：更改文件或目录的权限。</p></blockquote><h3 id="chwon"><a href="#chwon" class="headerlink" title="chwon"></a>chwon</h3><blockquote><p>作用：更改文件或目录的所有者。</p></blockquote><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><blockquote><p>作用：远程登录到另一台计算机。</p></blockquote><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><blockquote><p>作用：在计算机之间复制文件。</p></blockquote><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><blockquote><p>作用：从Web下载文件。</p><p>用法：<code>wget url [path]</code></p></blockquote><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><blockquote><p>作用：从Web下载文件并显示在终端上。</p></blockquote><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">总结自己用到的所有Linux命令</summary>
    
    
    
    <category term="软件使用教程" scheme="https://leewangwang.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="https://leewangwang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac mysql8.0登陆报错</title>
    <link href="https://leewangwang.github.io/2023/03/22/Mac%20mysql8.0%E7%99%BB%E9%99%86%E6%8A%A5%E9%94%99/"/>
    <id>https://leewangwang.github.io/2023/03/22/Mac%20mysql8.0%E7%99%BB%E9%99%86%E6%8A%A5%E9%94%99/</id>
    <published>2023-03-22T01:02:43.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-登陆mysql报错"><a href="#1-登陆mysql报错" class="headerlink" title="1. 登陆mysql报错"></a>1. 登陆mysql报错</h1><p>启动mysql</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">sudo <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>support<span class="hljs-operator">-</span>files<span class="hljs-operator">/</span>mysql.server <span class="hljs-keyword">start</span><br></code></pre></td></tr></table></figure><p>终端登陆mysql</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br></code></pre></td></tr></table></figure><p>发现输入密码后报错了，输了几个密码后还是这样</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">%</span> Enter password: <span class="hljs-number">123456</span><br><span class="hljs-operator">%</span> ERROR <span class="hljs-number">1045</span> (<span class="hljs-number">28000</span>): Access denied <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> (<span class="hljs-keyword">using</span> password: YES)<br></code></pre></td></tr></table></figure><h1 id="2-停止mysql"><a href="#2-停止mysql" class="headerlink" title="2. 停止mysql"></a>2. 停止mysql</h1><p>终端执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo /usr/local/mysql/support-files/mysql.server stop<br></code></pre></td></tr></table></figure><h1 id="3-启动MySql的安全模式"><a href="#3-启动MySql的安全模式" class="headerlink" title="3.启动MySql的安全模式"></a>3.启动MySql的安全模式</h1><p>1 终端跳转到bin目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">cd /usr/local/mysql/bin<br></code></pre></td></tr></table></figure><p>2 执行命令，获取权限</p><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">sudo su<br></code></pre></td></tr></table></figure><p>3 输入你电脑的密码</p><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">Password:<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>4 密码输完后会有一个 sh-3.2#</p><p>在sh-3.2# 下输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">./mysqld_safe --skip-grant-tables &amp;<br></code></pre></td></tr></table></figure><p>5 禁止mysql验证，原来停掉的mysql会重新启动</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[<span class="hljs-number">1</span>] <span class="hljs-number">2514</span><br>sh<span class="hljs-number">-3.2</span># <span class="hljs-number">2023</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span>T12:<span class="hljs-number">34</span>:<span class="hljs-number">01.6</span>NZ mysqld_safe Logging <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;/usr/local/mysql-8.0.32-macos13-x86_64/data/wangwangdeMacBook-Pro.local.err&#x27;</span>.<br><span class="hljs-number">2023</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span>T12:<span class="hljs-number">34</span>:<span class="hljs-number">01.6</span>NZ mysqld_safe Starting mysqld daemon <span class="hljs-keyword">with</span> databases <span class="hljs-keyword">from</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.32</span><span class="hljs-operator">-</span>macos13<span class="hljs-operator">-</span>x86_64<span class="hljs-operator">/</span>data<br></code></pre></td></tr></table></figure><h1 id="4-开始重置密码"><a href="#4-开始重置密码" class="headerlink" title="4.开始重置密码"></a>4.开始重置密码</h1><p>1 原来的终端不动，重新打开一个新的终端，<br>执行命令跳过验证进入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>u <span class="hljs-operator">-</span>root<br></code></pre></td></tr></table></figure><p>2 切换到mysql</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">use mysql;<br></code></pre></td></tr></table></figure><p>3 把root的密码改为空</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><p>4 刷新权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">flush privileges;<br></code></pre></td></tr></table></figure><p>5 执行命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;&quot; <br></code></pre></td></tr></table></figure><p>6 退出登录</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">exit<br></code></pre></td></tr></table></figure><p>7 重启mysql后，再重新登陆一下mysql</p><p>5.重置完成</p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">总结自己遇到的错误</summary>
    
    
    
    <category term="报错解决" scheme="https://leewangwang.github.io/categories/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    
    
    <category term="MySql" scheme="https://leewangwang.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>面经记录——八股文</title>
    <link href="https://leewangwang.github.io/2023/03/21/%E9%9D%A2%E7%BB%8F%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>https://leewangwang.github.io/2023/03/21/%E9%9D%A2%E7%BB%8F%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2023-03-21T13:36:22.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么B-树要叫B-树，B-树的概念是什么？"><a href="#为什么B-树要叫B-树，B-树的概念是什么？" class="headerlink" title="为什么B+树要叫B+树，B+树的概念是什么？"></a>为什么B+树要叫B+树，B+树的概念是什么？</h3><p>B+树是一种多路平衡查找树，常用于数据库和文件系统中的索引结构。B+树的名称中的B代表“Balanced”（平衡），而“+”代表B+树的一个特点，即在内部节点上只存储键值信息，而不存储数据记录的指针。因此，B+树比B树更适合磁盘存储，因为可以将更多的关键字放入内存中。</p><p>B+树的概念是将数据分成多个节点进行存储，每个节点中包含多个关键字和指向其他节点的指针。B+树的节点包含两种类型：内部节点和叶节点。内部节点存储关键字和指向子节点的指针，而叶节点存储关键字和指向数据记录的指针。B+树的所有叶节点按顺序链接在一起，形成一个链表，可以快速地遍历所有的数据记录。</p><p>B+树的搜索操作从根节点开始，递归地向下查找，直到找到包含所需关键字的叶节点。B+树支持插入、删除和更新操作，这些操作都需要保持B+树的平衡性和排序性质。B+树的平衡性保证了查询、插入、删除等操作的时间复杂度为O(log n)，其中n是B+树中存储的数据记录数。</p><p>根据网络搜索结果，B+树是B-树的变体，也是一种多路搜索树<a href="https://cloud.tencent.com/developer/article/1691641">1</a>。B+树的特点是：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1691641">所有的数据都存储在叶子节点，非叶子节点只存储索引</a><a href="https://cloud.tencent.com/developer/article/1691641">1</a><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">2</a>。</li><li><a href="https://cloud.tencent.com/developer/article/1691641">叶子节点之间用指针相连，形成一个有序链表</a><a href="https://cloud.tencent.com/developer/article/1691641">1</a><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">2</a>。</li><li>每个节点的关键字数量和孩子数量相等<a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">2</a>。</li></ul><p>B+树的名字可能是因为它比B-树有更多的优点，比如：</p><ul><li><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">B+树的查询效率更稳定，因为所有数据都在叶子节点，所以每次查找的路径长度相同</a><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">2</a>。</li><li><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">B+树更适合范围查询，因为叶子节点形成了一个有序链表，可以方便地遍历指定范围内的数据</a><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">2</a>。</li><li><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">B+树更节省空间，因为非叶子节点不存储数据，所以每个节点可以存储更多的关键字和指针</a><a href="https://www.cnblogs.com/lianzhilei/p/11250589.html">2</a>。</li></ul><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">总结面试题不会的题目</summary>
    
    
    
    <category term="面经" scheme="https://leewangwang.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java" scheme="https://leewangwang.github.io/tags/Java/"/>
    
    <category term="八股文" scheme="https://leewangwang.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="面经" scheme="https://leewangwang.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>世界杯语录</title>
    <link href="https://leewangwang.github.io/2022/12/01/%E4%B8%96%E7%95%8C%E6%9D%AF%E8%AF%AD%E5%BD%95/"/>
    <id>https://leewangwang.github.io/2022/12/01/%E4%B8%96%E7%95%8C%E6%9D%AF%E8%AF%AD%E5%BD%95/</id>
    <published>2022-12-01T07:04:30.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>生活当中往往是这样，一件看似不经意的小事，往往就是命运的转折。一次看似普通的再见，其实就是永别。</p><p align='right'>——2010年世界杯小组赛 阿根廷—希腊“球王”马拉多纳率队冲击世界杯</p><p>只要你胸怀坚定的信仰，做好充分的准备，保持高昂的斗志，这个世界说不定会揭开它冰冷的面纱，向你露出灿烂的微笑。</p><p align='right'>——2010年世界杯1/4决赛 苏亚雷斯“上帝之手”乌拉圭逆天翻盘加纳</p><p>人生当中成功只是一时的，失败却是主旋律，但是如何面对失败，却把人分成了不同的样子。有的人会被失败击垮，有的人能够不断地爬起来，继续向前。澳大利亚队是如此的，西班牙队也是如此。我想真正的成熟，应该并不是追求完美，而是直面自己的缺憾，这才是生活真正的本质。罗曼-罗兰说过的，这个世界上只有一种真正的英雄主义，那就是认清生活的真相，并且仍然爱着它。西班牙队重头再来吧，难道向上攀爬的那条路不是比站在顶峰更让人热血澎湃吗？</p><p align="right">——2014年世界杯卫冕冠军西班牙爆冷出局</p><p>奖杯就在眼前，他们自己的面孔都已经印在了杯身上，呼吸甚至触摸到了杯座，但是却只差一步。</p><p align='right'>——2014年世界杯决赛 梅西距冠军一步之遥 阿根廷加时被德国绝杀</p><p>当阳光亲吻他的沃土，当狂风吹刮他的橡树，当天堂召走他的所爱，他的心，仍为克罗地亚打着节拍。</p><p align='right'>——2018年世界杯决赛 克罗地亚2-4法国 虽败犹荣 克罗地亚创造了“小国奇迹”</p><p>除去睡眠，人的一生只有一万六千多天。而人与人之间的差距就在于你究竟是活了一万六千多天还是只活了一天却重复了一万六千多次。相信c罗的每一天都是崭新的！</p><p align='right'>——Cristiano Ronaldo dos Santos Aveiro</p><p>你只能感觉到自己的太阳穴，在随着你的脉搏一下一下地跳动，这就是世界杯的气氛。每个人都融入到其中，好像都感觉你找不到你自己，因为所有人都聚合在一块儿。每个人的心都随着同样的一只黑白相间的足球在共同地活动，这也许是足球最大的魅力，也是世界杯最大的魅力。</p><p align='right'>——世界杯</p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录一些经典的世界杯语录</summary>
    
    
    
    <category term="随记" scheme="https://leewangwang.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://leewangwang.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于数据增强的日志异常检测</title>
    <link href="https://leewangwang.github.io/2022/11/29/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9A%84%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    <id>https://leewangwang.github.io/2022/11/29/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9A%84%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</id>
    <published>2022-11-29T09:58:12.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-思路"><a href="#1-思路" class="headerlink" title="1 思路"></a>1 思路</h1><p>可以考虑用GAN来生成日志信息（数据增强），进行数据增强后的数据集可以提高检测鲁棒性。</p><h1 id="2-参考资料"><a href="#2-参考资料" class="headerlink" title="2 参考资料"></a>2 参考资料</h1><h2 id="2-1-论文"><a href="#2-1-论文" class="headerlink" title="2.1 论文"></a>2.1 论文</h2><p>什么是日志异常检测：<a href="http://www.infocomm-journal.com/cjnis/CN/10.11959/j.issn.2096-109x.2020072">基于日志的异常检测技术综述《网络与信息安全学报》</a></p><p>什么是GAN（生成对抗网络）：<a href="https://arxiv.org/abs/1406.2661">生成对抗网络《arXiv》</a></p><p>最基础的检测模型：<a href="https://www.cs.utah.edu/~lifeifei/papers/deeplog.pdf">DeepLog</a></p><p>改进1:<a href="https://www.ijcai.org/Proceedings/2019/658">LogAnomaly</a></p><p>改进2:<a href="https://dl.acm.org/doi/10.1145/3338906.3338931">LogRobust</a></p><p>在日志异常检测中使用到GAN的论文：<a href="https://link.springer.com/article/10.1007/s10796-020-10026-3">LogGAN</a></p><blockquote><p>论文可以在网上搜到很多别人已经翻译后的，可以省去自己翻译的时间，但是如果要精读论文的话，还是自己翻译一遍比较好，因为别人翻译的毕竟是别人的东西，自己总结的才能知道有没有漏缺。</p></blockquote><h2 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h2><p>GAN的python代码实现：<a href="https://github.com/eriklindernoren/PyTorch-GAN">GAN基于PyTorch的实现</a></p><p>基于深度学习的日志异常检测代码实现（包含3个方法）：<a href="https://github.com/donglee-afar/logdeep">DeepLog+LogAnomaly+LogRobust</a></p><blockquote><p>代码基本上从<code>GitHub</code>下载下来之后，配置相应的环境即可运行，但是如果要运行大的模型，还是需要一台比较好的机器（特指电脑显卡），笔记本一般只适合运行少量数据（例如10k条日志信息）。</p></blockquote><h2 id="2-3-数据集"><a href="#2-3-数据集" class="headerlink" title="2.3 数据集"></a>2.3 数据集</h2><p>获取数据集：<a href="https://doi.org/10.5281/zenodo.1144100">Zenodo</a></p><p>数据集介绍：<a href="https://github.com/logpai/loghub">LogHub</a></p><p>数据集预处理：<a href="https://github.com/logpai/logparser">LogPai</a></p><p>基于AI的日志大数据分析工具，能用于自动异常检测：<a href="https://github.com/logpai/loglizer">LogLizer</a></p><blockquote><p>如果不想使用全部数据集，可以在<code>GitHub</code>项目里面下载别人已经处理好的数据（数据量较小，只有2k条日志）。如果想要更多的数据，自己不想处理，也可以找本人要，我可以分享一下已经处理过的数据集。</p></blockquote><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">本文简要介绍实现基于数据增强的日志异常检测需要哪些资料</summary>
    
    
    
    <category term="日志异常检测" scheme="https://leewangwang.github.io/categories/%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    
    <category term="深度学习" scheme="https://leewangwang.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="日志异常检测" scheme="https://leewangwang.github.io/tags/%E6%97%A5%E5%BF%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="GAN" scheme="https://leewangwang.github.io/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>疫情下的魔幻世界</title>
    <link href="https://leewangwang.github.io/2022/11/29/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E9%AD%94%E5%B9%BB%E4%B8%96%E7%95%8C/"/>
    <id>https://leewangwang.github.io/2022/11/29/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E9%AD%94%E5%B9%BB%E4%B8%96%E7%95%8C/</id>
    <published>2022-11-29T02:33:20.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>做核酸的意义在哪里呢，每天又出不去，还能和谁接触，每天都要做核酸，难道就是让他们挣钱吗？</p><p align="right">——2022.11.30</p><p>核酸检测公司违法违纪，没有一个卖菜的大妈处罚严重，到底还是上头有人啊。</p><ul><li><p>2020年4月14日，济南华曦医学检验有限公司因未将感染性医疗废物置于专用包装物内被济南市卫健委警告、罚款。</p></li><li><p>2021年1月17日，济南华曦医学检验有限公司涉嫌谎报检测结果。</p></li><li><p>2022年3月29日，深圳核子华曦医学检验实验室进行检查，发现该实验于2022年3月10日在宝安区一新冠核酸采样点使用了非卫生技术人员唐某开展核酸采样工作，罚款5万元。</p></li><li><p>2022年6月7、9日，深圳核子华曦医学检验实验室存在未按照规定签署医学文书的行为，最终被处罚款3500元。</p></li></ul><p align="right">——2022.12.1</p><p>其它地方都已经放开了，也就只有头上有辫子的人还在坚持无脑的全员核酸检测，不会针对性的区域检测吗？</p><p align="right">——2022.12.3</p><p>放开后，全国的医疗撑不住了，大城市的人有个小病就要去医院住院，人家可以免费治疗，医保全部报销，小城镇的人们的医疗资源很紧缺，很多老人发烧了都没发去诊所。</p><p align="right">——2022.12.28</p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录下当前这个魔幻的世界</summary>
    
    
    
    <category term="随记" scheme="https://leewangwang.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://leewangwang.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常见报错</title>
    <link href="https://leewangwang.github.io/2022/11/24/Hexo%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/"/>
    <id>https://leewangwang.github.io/2022/11/24/Hexo%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</id>
    <published>2022-11-24T02:33:37.000Z</published>
    <updated>2024-12-22T10:18:36.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题1"><a href="#1-问题1" class="headerlink" title="1 问题1"></a>1 问题1</h1><p>Hexo出现<code>error：spawn failed</code>错误的解决方法</p><p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211241035624.png" alt="image-20221124103531614"></p><p>原因：git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p><p>解决办法：</p><h2 id="1-1-解决方法一"><a href="#1-1-解决方法一" class="headerlink" title="1.1 解决方法一"></a>1.1 解决方法一</h2><p>删除<code>.deploy_git</code>文件夹</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git config --global core.autocrlf false<br></code></pre></td></tr></table></figure><p>重新执行Hexo命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="1-2-解决方法二"><a href="#1-2-解决方法二" class="headerlink" title="1.2 解决方法二"></a>1.2 解决方法二</h2><p>删除<code>.deploy_git</code>, <code>public</code>两个文件夹</p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211241036896.png" alt="image-20221124103636360" width="80%;" /><p>重新执行Hexo命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">记录下自己使用Hexo遇见的所有报错</summary>
    
    
    
    <category term="教程" scheme="https://leewangwang.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://leewangwang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://leewangwang.github.io/2022/11/19/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://leewangwang.github.io/2022/11/19/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-11-19T02:30:32.000Z</published>
    <updated>2024-12-22T11:35:32.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1 环境安装"></a>1 环境安装</h1><h2 id="1-1-安装HomeBrew"><a href="#1-1-安装HomeBrew" class="headerlink" title="1.1 安装HomeBrew"></a>1.1 安装HomeBrew</h2><p>使用brew镜像安装脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>可能会有安装提示失败，请自行Google</p><p>查看自己的MacBook是否安装brew，执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew<br></code></pre></td></tr></table></figure><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191043456.png" alt="image-20221119104354687" width="70%;" /><h2 id="1-2-安装Node-js"><a href="#1-2-安装Node-js" class="headerlink" title="1.2 安装Node.js"></a>1.2 安装Node.js</h2><p>可以先查看自己的MacBook是否已经安装了Node</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191046800.png" alt="image-20221119104605289" width="50%;" /><p>如果没有安装，执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure><h2 id="1-3-安装Hexo"><a href="#1-3-安装Hexo" class="headerlink" title="1.3 安装Hexo"></a>1.3 安装Hexo</h2><p>可以直接使用node安装hexo，【-g在全局进行安装】</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><h2 id="1-4-安装git"><a href="#1-4-安装git" class="headerlink" title="1.4 安装git"></a>1.4 安装git</h2><p>检查MacBook是否安装git</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191052572.png" alt="image-20221119105231016" width="50%;" /><p>如果没有安装，使用brew安装git</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure><p>GitHub账号的创建以及git的配置请自行Google</p><h1 id="2-使用Hexo"><a href="#2-使用Hexo" class="headerlink" title="2 使用Hexo"></a>2 使用Hexo</h1><p>在本地创建一个文件夹，命名为“MyBlog”，在终端里面进入该文件夹</p><h2 id="2-1-初次使用"><a href="#2-1-初次使用" class="headerlink" title="2.1 初次使用"></a>2.1 初次使用</h2><ol><li>初始化目录</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><ol start="2"><li>开启本地服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191404038.png" alt="image-20221119140403639" width="57%;" /><p>在浏览器中输入<a href="http://localhost:4000/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5">http://localhost:4000/，即可访问博客首页</a></p><h2 id="2-2-连接GitHub"><a href="#2-2-连接GitHub" class="headerlink" title="2.2 连接GitHub"></a>2.2 连接GitHub</h2><p>打开<code>_config.yml</code>文件，修改内容</p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191406953.png" alt="image-20221119140651960" width="60%;" /><p>修改为自己的GitHub链接，密钥如何配置，请自行Google</p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191410822.png" alt="image-20221119141039195" width="60%;" /><h2 id="2-3-Hexo新建博客"><a href="#2-3-Hexo新建博客" class="headerlink" title="2.3 Hexo新建博客"></a>2.3 Hexo新建博客</h2><ol><li>创建一个新的博客</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;新博客&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>MyBlogs/source/_posts</code>中找到<code>新博客.md</code>文件，可以编辑内容</li><li>清理历史缓存</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">heco clean<br></code></pre></td></tr></table></figure><ol start="4"><li>产生静态网页</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><ol start="5"><li>部署到GitHub Page上</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>或者使用一个单独命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g --d<br></code></pre></td></tr></table></figure><h1 id="3-Hexo"><a href="#3-Hexo" class="headerlink" title="3 Hexo"></a>3 Hexo</h1><p>使用终端定位到博客文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<br></code></pre></td></tr></table></figure><p>修改Hexo根目录下的<code>_config.yml</code>文件，把主题改为<code>butterfly</code></p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211191419405.png" alt="image-20221119141937438" width="50%;" /><h1 id="4-Hexo博客配置"><a href="#4-Hexo博客配置" class="headerlink" title="4 Hexo博客配置"></a>4 Hexo博客配置</h1><h2 id="4-1-Front-matter"><a href="#4-1-Front-matter" class="headerlink" title="4.1 Front-matter"></a>4.1 Front-<strong>matter</strong></h2><p>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于<font color='orange'>页面</font>配置</li><li>Post Front-matter 用于<font color='orange'>文章页</font>配置</li></ul><blockquote><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p></blockquote><h3 id="4-1-1-Page-Front-matter"><a href="#4-1-1-Page-Front-matter" class="headerlink" title="4.1.1 Page Front-matter"></a>4.1.1 Page Front-matter</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">title:<br>date:<br>updated:<br>type:<br>comments:<br>description:<br>keywords:<br>top<span class="hljs-emphasis">_img:</span><br><span class="hljs-emphasis">mathjax:</span><br><span class="hljs-emphasis">katex:</span><br><span class="hljs-emphasis">aside:</span><br><span class="hljs-emphasis">aplayer:</span><br><span class="hljs-emphasis">highlight_</span>shrink:<br></code></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>update</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考<code>音乐</code>配置</td></tr><tr><td>Highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h3 id="4-1-2-Post-Front-matter"><a href="#4-1-2-Post-Front-matter" class="headerlink" title="4.1.2 Post Front-matter"></a>4.1.2 Post Front-matter</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">title:<br>date:<br>updated:<br>tags:<br>categories:<br>keywords:<br>description:<br>top<span class="hljs-emphasis">_img:</span><br><span class="hljs-emphasis">comments:</span><br><span class="hljs-emphasis">cover:</span><br><span class="hljs-emphasis">toc:</span><br><span class="hljs-emphasis">toc_</span>number:<br>toc<span class="hljs-emphasis">_style_</span>simple:<br>copyright:<br>copyright<span class="hljs-emphasis">_author:</span><br><span class="hljs-emphasis">copyright_</span>author<span class="hljs-emphasis">_href:</span><br><span class="hljs-emphasis">copyright_</span>url:<br>copyright<span class="hljs-emphasis">_info:</span><br><span class="hljs-emphasis">mathjax:</span><br><span class="hljs-emphasis">katex:</span><br><span class="hljs-emphasis">aplayer:</span><br><span class="hljs-emphasis">highlight_</span>shrink:<br>aside:<br></code></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>Top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_auther</td><td>【可选】文章版权模块的<code>文章作者</code></td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的<code>文章作者</code>链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的<code>文章连结</code>链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的<code>版权声明</code>文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h2 id="4-2-Hexo新建博文自定义模版"><a href="#4-2-Hexo新建博文自定义模版" class="headerlink" title="4.2 Hexo新建博文自定义模版"></a>4.2 Hexo新建博文自定义模版</h2><p>打开博客文件夹目录下的<code>scaffolds</code>文件夹</p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211202253191.png" alt="Hexo博客文件夹" width="67%;" /><p>修改<code>post.md</code>文件</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">title: &#123;&#123; title &#125;&#125;  //文章标题<br>date: &#123;&#123; date &#125;&#125;    //文章创建时间<br>permalink:          //文章显示连接<br>categories:         //文章匪类目录<br>tags: []            //文章标签，可多个，用，隔开<br>description:        //文章描述<br>image:              //自定义的文章摘要图片，只在页面展示，文章内消失<br>copyright: true     //增加底部的版权信息（需要配置）<br></code></pre></td></tr></table></figure><h1 id="5-官方资料"><a href="#5-官方资料" class="headerlink" title="5 官方资料"></a>5 官方资料</h1><p>官网：<a href="https://hexo.io/">https://hexo.io/</a></p><p>官方文档：<a href="https://hexo.io/docs/">https://hexo.io/docs/</a></p><p>文体中心：<a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></p><p>GitHub：<a href="https://github.com/hexojs/hexo/issues">https://github.com/hexojs/hexo/issues</a></p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">单纯作为自己搭建博客的流程记录</summary>
    
    
    
    <category term="教程" scheme="https://leewangwang.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://leewangwang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac Book苹果电脑设置自定义壁纸文件夹Desktop Pictures</title>
    <link href="https://leewangwang.github.io/2022/11/08/Mac%20Book%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A3%81%E7%BA%B8%E6%96%87%E4%BB%B6%E5%A4%B9Desktop%20Pictures/"/>
    <id>https://leewangwang.github.io/2022/11/08/Mac%20Book%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A3%81%E7%BA%B8%E6%96%87%E4%BB%B6%E5%A4%B9Desktop%20Pictures/</id>
    <published>2022-11-08T00:44:50.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、找到系统自带的壁纸文件夹，在桌面右键选中“更改桌面背景”</p><p>2、双击“桌面图片”，即可进入系统自带壁纸文件夹</p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211210846585.png" alt="img" width="67%;" /><p> 3、由于系统10.15.*以后的版本不能直接复制图片到系统文件夹里面，我们需要在目录<code>Macintosh HD/资源库</code>下新建一个壁纸文件夹<code>Desktop Pictures</code>，自定义壁纸图片放这个文件夹里面。</p><p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211210846993.png" alt="img"></p><p>4.在“桌面与屏幕保护程序”中选中+，将这个文件夹添加进去即可</p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211210846050.png" alt="img" width="67%;" /><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">Mac自带的壁纸很容易就腻了，但是自带文件夹壁纸不可更改</summary>
    
    
    
    <category term="教程" scheme="https://leewangwang.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Mac Book" scheme="https://leewangwang.github.io/tags/Mac-Book/"/>
    
    <category term="MacOS" scheme="https://leewangwang.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac Book苹果电脑修改启动台应用程序图标排列</title>
    <link href="https://leewangwang.github.io/2022/11/08/Mac%20Book%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E5%8F%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87%E6%8E%92%E5%88%97/"/>
    <id>https://leewangwang.github.io/2022/11/08/Mac%20Book%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E5%8F%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87%E6%8E%92%E5%88%97/</id>
    <published>2022-11-08T00:39:43.000Z</published>
    <updated>2023-05-31T01:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac自带的图标排列比较大，我们想把图标缩小一下</p><p><img src="https://my-typora-photos.oss-cn-beijing.aliyuncs.com/img/202211240922269.png" alt="image-20221124092201788"></p><p> 打开终端（terminal）并输入：</p><h3 id="1、设置图标有多少列"><a href="#1、设置图标有多少列" class="headerlink" title="1、设置图标有多少列"></a>1、设置图标有多少列</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock springboard-columns -int 10<br></code></pre></td></tr></table></figure><h3 id="2、设置图标有多少行"><a href="#2、设置图标有多少行" class="headerlink" title="2、设置图标有多少行"></a>2、设置图标有多少行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock springboard-rows -int 8<br></code></pre></td></tr></table></figure><h3 id="3、重置Launchpad-并重启"><a href="#3、重置Launchpad-并重启" class="headerlink" title="3、重置Launchpad,并重启"></a>3、重置Launchpad,并重启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock ResetLaunchPad -bool <span class="hljs-literal">true</span>;killall Dock<br></code></pre></td></tr></table></figure><h3 id="4、解决电脑重启之后启动台又变回去了，在终端输入以下命令"><a href="#4、解决电脑重启之后启动台又变回去了，在终端输入以下命令" class="headerlink" title="4、解决电脑重启之后启动台又变回去了，在终端输入以下命令"></a>4、解决电脑重启之后启动台又变回去了，在终端输入以下命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> ~/Library/Application\ Support/Dock/*.db &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock ResetLaunchPad -bool <span class="hljs-literal">true</span> &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><p>最后将系统默认的启动台里面的<code>其他</code>文件夹名称改一下就行</p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=58cydkuoizw&amp;m=0&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33" async="async"></script>]]></content>
    
    
    <summary type="html">Mac Book的图标会过大，页面图标太少，因此自己设置一下</summary>
    
    
    
    <category term="教程" scheme="https://leewangwang.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Mac Book" scheme="https://leewangwang.github.io/tags/Mac-Book/"/>
    
    <category term="MacOS" scheme="https://leewangwang.github.io/tags/MacOS/"/>
    
  </entry>
  
</feed>
